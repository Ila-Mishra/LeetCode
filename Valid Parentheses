Algorithm:
* Declare an empty stack.
* Push an opening parenthesis on top of the stack.
* In case of a closing bracket, check if the stack is empty.
* If not, pop in a closing parenthesis if the top of the stack contains the corresponding opening parenthesis.
* If the parentheses are valid, then the stack will be empty once the input string finishes.


class Solution {
    public boolean isValid(String input_str) {
        // Declaring a stack
        Stack<Character> s = new Stack<Character>();
        // Iterating over the entire string.
        for (char st : input_str.toCharArray()) {
        //  If the input string contains an opening parenthesis,
        //  push in on to the stack.
            if (st == '(' || st == '{' || st == '[') {
                s.push(st);
            }
            else {
            // In the case of valid parentheses, the stack cannot be 
            // be empty if a closing parenthesis is encountered.
                if(s.empty()) {
                    return false;
                }
                else{
                // If the input string contains a closing bracket,
                // then pop the corresponding opening parenthesis if
                // present.
                    char top = (Character) s.peek();
                    if(st == ')' && top == '(' || st == '}' && top == '{' || st == ']' && top == '['){
                        s.pop();
                    }
            else{
            return false;
          }
        }
      }
    }
    //  Checking the status of the stack to determine the
    //  validity of the string.
    if(s.empty()) {
      return true;
    }
    else{
      return false;
    }
    }
}
