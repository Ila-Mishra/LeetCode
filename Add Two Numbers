/**You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
* You may assume the two numbers do not contain any leading zero, except the number 0 itself.*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        //creating a new list by storing -1 in it
        ListNode l3 = new ListNode(-1);
        //creating dummy list of l3
        ListNode curr = l3;
        int carry = 0;
        
        //while loop to run till value is not null
        while(l1!=null || l2!=null || carry != 0){
            //storing value of list in num1 if not null else 0
            int num1 = l1==null?0:l1.val;
            //storing value of list in num2 if not null else 0
            int num2 = l2==null?0:l2.val;
            
            //summing up values
            int sum = num1+num2+carry;
            //storing sum element in newSum
            int newSum = sum%10;
            //storing carry in new variable
            carry = sum/10;
            //insert sum element in list
            curr.next = new ListNode(newSum);
            curr = curr.next;
            
            //increment the pointer
            l1 = l1==null?null:l1.next;
            l2 = l2==null?null:l2.next;
            
        }
        
        return l3.next;
    }
}
