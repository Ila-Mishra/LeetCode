/*use a hash set to track the longest substring without repeating characters so far, use a fast pointer j to see if character j is in the hash set or not, if not, great, add it to the hash set, move j forward and update the max length, otherwise, delete from the head by using a slow pointer i until we can put character j to the hash set.*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int i=0, j=0, max=0;
        HashSet<Character> set = new HashSet<>();
        
        while(j<s.length()){
            if(!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                max = Math.max(max, set.size());
            }
            else{
                set.remove(s.charAt(i++));
            }
        }
        
        return max;
    }
}


class Solution {
    static final int NO_OF_CHARS = 256;
    
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int res = 0;
        
        int [] lastIndex = new int [NO_OF_CHARS];
        Arrays.fill(lastIndex, -1);
        int i=0;
        for (int j = 0; j < n; j++) {
            i = Math.max(i, lastIndex[s.charAt(j)] + 1);
 
            res = Math.max(res, j - i + 1);
 
            lastIndex[s.charAt(j)] = j;
        }
        return res;
    }
}
